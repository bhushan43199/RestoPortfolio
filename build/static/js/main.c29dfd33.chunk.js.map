{"version":3,"sources":["logo.svg","components/Home.js","components/RestauranstCreate.js","components/RestauranstDetail.js","components/RestauranstList.js","components/RestauranstSearch.js","components/RestauranstUpdate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Component","RestauranstCreate","state","name","email","adr","rating","console","log","this","fetch","method","headers","body","JSON","stringify","then","result","json","rsp","alert","onChange","event","setState","target","value","placeholder","onClick","create","RestauranstDetail","RestauranstList","list","getData","id","Table","striped","bordered","hover","map","item","i","to","icon","faEdit","color","delete","faTrash","RestauranstSearch","RestauranstUpdate","props","match","params","update","App","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","faHome","faList","faPlus","faSearch","path","render","exact","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c29dfd33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Home Component\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\n\r\nclass RestauranstCreate extends Component {\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            name:null,\r\n            email:null,\r\n            adr:null,\r\n            rating:null,\r\n        }\r\n    }\r\n\r\n    create()\r\n    {\r\n        console.log(this.state)\r\n        fetch(\"http://localhost:3000/restaurant\",\r\n       \r\n       { \r\n           method:'Post',\r\n           headers:{\r\n            'Content-Type':\"application/json\"\r\n        }\r\n           ,\r\n            body:JSON.stringify(this.state)\r\n    }).then((result)=>{\r\n            result.json().then((rsp)=>{\r\n                console.log(rsp)\r\n                alert(\"Restaurant has been added \")\r\n            })\r\n        }\r\n\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                Restaurants Create\r\n                <div>\r\n                    <input onChange={(event) => { this.setState({ name: event.target.value }) }} placeholder=\"Restaurant name\" />\r\n                    <br></br>\r\n                    <input onChange={(event) => { this.setState({ adr: event.target.value }) }} placeholder=\"Restaurant Adr\" />\r\n                    <br></br>\r\n                    <input onChange={(event) => { this.setState({ email: event.target.value }) }} placeholder=\"Restaurant Email\" />\r\n                    <br></br>\r\n                    <input onChange={(event) => { this.setState({ rating: event.target.value }) }} placeholder=\"Restaurant Rating\" />\r\n                    <br></br>\r\n\r\n\r\n                    <button onClick ={()=>(this.create())}>Add Restaurant</button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RestauranstCreate;","import React, { Component } from 'react';\r\n\r\nclass RestauranstDetail extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                RestauranstDetail\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RestauranstDetail;","import React, { Component } from 'react';\r\nimport { Table } from 'react-bootstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCoffee, faEdit, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass RestauranstList extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            list: null,\r\n        }\r\n    }\r\n    //component did mount calls when html is ready\r\n    componentDidMount() {\r\n        /* fetch(\"http://localhost:3000/restaurant\").then((rsp) => {\r\n            rsp.json().then((result) => {\r\n                //console.log(rsp);\r\n                this.setState({ list: result })\r\n            })\r\n        }) */\r\n\r\n        // after delete refresh automatic function\r\n\r\n        this.getData()\r\n    }\r\n    getData() \r\n    {\r\n        fetch(\"http://localhost:3000/restaurant\").then((rsp) => {\r\n            rsp.json().then((result) => {\r\n                //console.log(rsp);\r\n                this.setState({ list: result })\r\n            })\r\n        })\r\n    }\r\n\r\n\r\ndelete(id)\r\n{\r\n    //alert(\"Delete Function\")\r\n    fetch(\"http://localhost:3000/restaurant/\" + id,\r\n        {\r\n            method: \"DELETE\"\r\n            /* headers:{\r\n                'Content-type':'application/json'\r\n            },\r\n            body:JSON.stringify(this.state) */\r\n        }).then((result) => {\r\n            result.json().then((rsp) => {\r\n                alert(\"Restaurant Has Been Deleted\")\r\n                this.getData()\r\n            })\r\n\r\n        })\r\n\r\n\r\n}\r\n\r\nrender() {\r\n    //console.warn(this.state)\r\n    return (\r\n        <div>\r\n            <h1>Restauranst List</h1>\r\n            {\r\n                this.state.list ?\r\n                    <div>\r\n                        <Table striped bordered hover>\r\n                            <thead>\r\n                                <tr>\r\n\r\n                                    <th>Id</th>\r\n                                    <th>Name</th>\r\n                                    <th>Email</th>\r\n                                    <th>Rating</th>\r\n                                    <th>Location</th>\r\n                                    <th>Operation. </th>\r\n                                </tr>\r\n\r\n                            </thead>\r\n                            <tbody>\r\n                                {\r\n                                    this.state.list.map((item, i) =>\r\n                                        //<div className=\"list-wrapper\">\r\n                                        //    <span>{/* <h2>Name :</h2> */}{item.name} </span>\r\n                                        //    <span>{/* <h2>Email :</h2> */} </span>\r\n                                        //\r\n                                        //    <span>{/* <h2>Rating :</h2> */}{item.rating}</span>\r\n                                        //    <span>{/* <h2>Address :</h2> */}{item.adr}</span>\r\n                                        //\r\n                                        //</div>\r\n                                        <tr>\r\n                                            <td>{item.id}</td>\r\n                                            <td>{item.name}</td>\r\n                                            <td>{item.email}</td>\r\n                                            <td>{item.rating}</td>\r\n                                            <td>{item.adr}</td>\r\n                                            {/* Adding sixth column to update resto using API and it will send with id */}\r\n                                            <td><Link to={\"/update/\" + item.id}><FontAwesomeIcon icon={faEdit} color=\"orange\"></FontAwesomeIcon></Link>\r\n                                                <span onClick={() => { this.delete(item.id) }}><FontAwesomeIcon icon={faTrash} color=\"red\"></FontAwesomeIcon></span></td>\r\n\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            </tbody>\r\n                        </Table>\r\n                    </div>\r\n                    : <p>Please wait</p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default RestauranstList;","import React, { Component } from 'react';\r\n\r\nclass RestauranstSearch extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                RestauranstSearch\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RestauranstSearch;","import React, { Component } from 'react';\r\n\r\nclass RestauranstUpdate extends Component {\r\n    constructor()\r\n    {\r\n        super()\r\n        this.state={\r\n            name:null,\r\n            email:null,\r\n            rating:null,\r\n            adr:null,\r\n            id:null\r\n        }\r\n    }\r\n    componentDidMount()\r\n    {\r\n        fetch('http://localhost:3000/restaurant/'+this.props.match.params.id)\r\n        .then((rsp)=>\r\n        {\r\n            rsp.json().then((result)=>{\r\n               //here we are updating values by setting state in result.name\r\n                this.setState({\r\n                    name:result.name,\r\n                    email:result.email,\r\n                    rating:result.rating,\r\n                    adr:result.adr,\r\n                    id:result.id\r\n\r\n\r\n                })\r\n                \r\n            })\r\n        })\r\n    }\r\n\r\n    // making update function that calls PUT api\r\n    update()\r\n    {\r\n        console.log(this.state)\r\n        fetch(\"http://localhost:3000/restaurant/\"+this.state.id,\r\n       \r\n       { \r\n           method:'PUT',\r\n           headers:{\r\n            'Content-Type':\"application/json\"\r\n        }\r\n           ,\r\n            body:JSON.stringify(this.state)\r\n    }).then((result)=>{\r\n            result.json().then((rsp)=>{\r\n                console.log(rsp)\r\n                alert(\"Restaurant has been updated \")\r\n            })\r\n        }\r\n\r\n        )\r\n    }\r\n    render() {\r\n        console.log(this.props.match.params.id)\r\n        return (\r\n            <div>\r\n               <h1> Restaurants Update></h1>\r\n                <div>\r\n                <input onChange={(event) => { this.setState({ id: event.target.value }) }} placeholder=\"Restaurant name\"\r\n                    value={this.state.id} />\r\n                    <br></br>\r\n                    <br></br>\r\n                <input onChange={(event) => { this.setState({ name: event.target.value }) }} placeholder=\"Restaurant name\"\r\n                    value={this.state.name} />\r\n                    <br></br>\r\n                    <br></br>\r\n                    <input onChange={(event) => { this.setState({ adr: event.target.value }) }} placeholder=\"Restaurant Adr\" \r\n                    value={this.state.adr}/>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <input onChange={(event) => { this.setState({ email: event.target.value }) }} placeholder=\"Restaurant Email\"\r\n                    value={this.state.email} />\r\n                    <br></br>\r\n                    <br></br>\r\n                    <input onChange={(event) => { this.setState({ rating: event.target.value }) }} placeholder=\"Restaurant Rating\" \r\n                    value={this.state.rating}/>\r\n                    <br></br>\r\n                    <br></br>\r\n\r\n                    <button onClick={()=>{this.update()}}>Update Restaurant</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default RestauranstUpdate;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee, faEdit, faTrash, faList, faHome, faPlus, faSearch } from '@fortawesome/free-solid-svg-icons'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link,\n\n} from 'react-router-dom'\nimport {Navbar,Nav} from 'react-bootstrap'\n\nimport Home from './components/Home'\nimport RestaurantCreate from './components/RestauranstCreate'\nimport RestaurantDetail from './components/RestauranstDetail'\nimport RestaurantList from './components/RestauranstList'\nimport RestaurantSearch from './components/RestauranstSearch'\nimport RestaurantUpdate from './components/RestauranstUpdate'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <Navbar bg=\"light\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">Resto</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\"><Link to=\"/\"><FontAwesomeIcon icon={faHome}></FontAwesomeIcon>Home</Link></Nav.Link>\n      <Nav.Link href=\"#link\"><Link to=\"/list\"><FontAwesomeIcon icon={faList}></FontAwesomeIcon>List</Link></Nav.Link>\n      <Nav.Link href=\"#link\"><Link to=\"/create\"> <FontAwesomeIcon icon={faPlus}></FontAwesomeIcon>Create</Link></Nav.Link>\n      <Nav.Link href=\"#link\"><Link to=\"/search\"><FontAwesomeIcon icon={faSearch}></FontAwesomeIcon>Search</Link></Nav.Link>\n{/*       <Nav.Link href=\"#link\"><Link to=\"/detail\">Detail</Link></Nav.Link>\n */}{/*       <Nav.Link href=\"#link\"><Link to=\"/update\">Update</Link></Nav.Link>\n */}\n      \n    </Nav>\n    \n  </Navbar.Collapse>\n</Navbar>\n        \n        <Route path=\"/list\">\n          <RestaurantList />\n        </Route>\n        <Route path=\"/create\">\n          <RestaurantCreate />\n        </Route>\n        <Route path=\"/search\">\n          <RestaurantSearch />\n        </Route>\n        <Route path=\"/detail\">\n          <RestaurantDetail />\n        </Route>\n        {/* Now we are parsing props to edit id from list */}\n        <Route path=\"/update/:id\"\n        render={(props=>(<RestaurantUpdate {...props} />)\n          )}\n        >\n          \n        </Route>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}